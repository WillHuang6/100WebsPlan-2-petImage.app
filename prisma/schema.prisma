generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id              String            @id @default(uuid())
  email           String            @unique
  name            String?
  emailVerified   Boolean           @default(false)
  image           String?
  credits         Int               @default(0)     // 剩余图片生成次数
  totalCredits    Int               @default(0)     // 历史总购买次数
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  sessions        Session[]
  accounts        Account[]
  purchases       Purchase[]
  usages          Usage[]

  @@map("user")
}

model Purchase {
  id                 String   @id
  userId             String
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  productId          String
  productName        String
  amount             Int      // 金额(分)
  currency           String   @default("USD")
  credits            Int      // 此次购买获得的图片次数
  providerCustomerId String
  transactionId      String?  // Creem交易ID
  status             String   @default("completed")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@map("purchase")
}

model Usage {
  id          String   @id @default(uuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  imageUrl    String?  // 生成的图片URL
  prompt      String?  // 用户输入的提示词
  model       String?  // 使用的AI模型
  creditsUsed Int      @default(1)  // 消耗的次数(通常为1)
  createdAt   DateTime @default(now())

  @@map("usage")
}

model Session {
  id        String   @id
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("session")
}

model Account {
  id                    String    @id
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@map("account")
}

model Verification {
  id         String    @id
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime? @default(now())
  updatedAt  DateTime? @updatedAt

  @@map("verification")
}